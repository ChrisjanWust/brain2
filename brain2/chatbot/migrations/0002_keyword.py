# Generated by Django 4.1.9 on 2023-06-02 22:52
from ..logic import ResponseFormulator

from dataclasses import dataclass
from django.db import migrations, models


@dataclass
class DummyResponseFormulator(ResponseFormulator):
    account_id: str
    query: str

    def __post_init__(self):
        self.keywords = self.extract_keywords(self.query)


def populate_keywords(apps, schema_editor):
    Keyword = apps.get_model("chatbot", "Keyword")
    Context = apps.get_model("chatbot", "Context")

    for context in Context.objects.all():
        self = DummyResponseFormulator(body={}, account_id=context.account_id, query=context.text)
        # copy-pasted from ResponseFormulator class
        context = Context.objects.create(account_id=self.account_id, text=self.query)
        found_keyword_objects = list(Keyword.objects.filter(word__in=self.keywords))
        found_keywords_words = [keyword.word for keyword in found_keyword_objects]
        missing_keywords_words = [word for word in self.keywords if word not in found_keywords_words]
        missing_keyword_objects = Keyword.objects.bulk_create([Keyword(word=word) for word in missing_keywords_words])
        context.keywords.add(*(found_keyword_objects + missing_keyword_objects))


class Migration(migrations.Migration):
    dependencies = [
        ("chatbot", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Keyword",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("word", models.CharField(max_length=16)),
                ("contexts", models.ManyToManyField(related_name="keywords", to="chatbot.context")),
            ],
        ),
        migrations.RunPython(populate_keywords),
    ]
